// Generated by CoffeeScript 1.9.1
(function() {
  var htmlWordMatch;

  htmlWordMatch = /(<\/?\w+(?:(?:\s+\w+(?:\s*=\s*(?:".*?"|'.*?'|[^'">\s]+))?)+\s*|\s*)\/?>)/gim;

  $(document).ready(function() {
    var FAQify, appendLastModeDate, getlastmod, headers, leetSpeak, leetSpeakExtra, tokenify, visitorCounter;
    visitorCounter();
    headers();
    leetSpeak();
    leetSpeakExtra();
    FAQify();
    $('.blink').modernBlink();
    $('.lastUpdated').append(appendLastModeDate($(this), document.lastModified));
    $('.urlLastUpdated').each(function() {
      return getlastmod(element.attr("rel"), appendLastModeDate, $(this));
    });
    $('.link').click(function() {
      return window.location = $(this).attr('rel');
    });
    $('#saggie .title').each(function() {
      $(this).attr('title', 'sAgG13!!!1!');
      $(this).click(function() {
        return window.location = '/default.html';
      });
      return null;
    });
    $('.more').each(function() {
      $(this).attr('title', '[ m0R3!!!11!1 ]');
      $(this).click(function() {
        return window.location = $(this).attr('rel');
      });
      return null;
    });
    appendLastModeDate = function(element, date) {
      return element.append('Last updated: ' + date);
    };
    getlastmod = function(url, dateFunction, element) {
      var req;
      req = XMLHttpRequest();
      req.open("GET", url);
      req.addEventListener("load", function() {
        return dateFunction(element, req.getResponseHeader("Last-Modified"));
      }, false);
      req.send(null);
      return null;
    };
    visitorCounter = function() {
      $('.counter').each(function() {
        var counter, element, i, j, ref;
        element = $(this);
        counter = "";
        for (i = j = 0, ref = element.attr("rel"); j <= ref; i = j += 1) {
          counter += Math.floor(Math.random() * 8) + 1 + "";
        }
        return element.append(counter);
      });
      return null;
    };
    headers = function() {
      $('#homeMenu .menuItem .icon').each(function() {
        var link;
        link = $(this).parent().find('.text a')[0];
        if (link !== "") {
          if ((link.target != null) && (link.target !== "")) {
            return $(this).click(function() {
              return window.open(link.href, link.target);
            });
          } else {
            return $(this).click(function() {
              return window.location = link.href;
            });
          }
        } else {
          return $(this).css('cursor', 'default');
        }
      });
      return null;
    };
    tokenify = function(element, stylingFunction) {
      $(element).each(function() {
        var j, l, len, len1, output, token, tokens, word, words;
        output = "";
        tokens = $(this).html().split(htmlWordMatch);
        for (j = 0, len = tokens.length; j < len; j++) {
          token = tokens[j];
          if (token.trim() !== "") {
            if (!(token[0] === "<")) {
              words = token.split(/\s+/);
              for (l = 0, len1 = words.length; l < len1; l++) {
                word = words[l];
                if (word !== "") {
                  output += stylingFunction(word);
                }
              }
            } else {
              output += token;
            }
          }
        }
        return $(this).html(output);
      });
      return null;
    };
    leetSpeak = function() {
      tokenify('.l33TsP33k', function(word) {
        return "<span class=\"l33Tf1RsT\">" + word[0] + "</span>" + word.substring(1, word.length) + " ";
      });
      return null;
    };
    leetSpeakExtra = function() {
      tokenify('.l33TsP33k3xTrA', function(word) {
        var apply, j, k, output, ref;
        output = "";
        apply = true;
        for (k = j = 0, ref = word.length; j <= ref; k = j += 1) {
          output += apply ? "<span class=\"l33Tf1RsT\">" + word[k] + "</span>" : word[k];
          apply = !apply;
        }
        return output;
      });
      return null;
    };
    return FAQify = function() {
      tokenify('#SDFaq', function(word) {
        return word.replace(/(faq)/gi, "<span class='faq'>$1</span>");
      });
      return null;
    };
  });

}).call(this);

//# sourceMappingURL=main.js.js.map
